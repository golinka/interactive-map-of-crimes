<svg xmlns="http://www.w3.org/2000/svg"
     viewBox="0 0 1656 900"
     onload="makeDraggable(evt)" preserveAspectRatio="xMidYMid slice">
    
    <style>
      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Thin.woff2") format("woff2");
        font-weight: 100;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Thin.woff") format("woff");
        font-weight: 100;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-UltraLight.woff2") format("woff2");
        font-weight: 200;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-UltraLight.woff") format("woff");
        font-weight: 200;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Light.woff2") format("woff2");
        font-weight: 300;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Light.woff") format("woff");
        font-weight: 300;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Regular.woff2") format("woff2");
        font-weight: normal;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Regular.woff") format("woff");
        font-weight: normal;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Medium.woff2") format("woff2");
        font-weight: 500;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Medium.woff") format("woff");
        font-weight: 500;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Bold.woff2") format("woff2");
        font-weight: bold;
        font-style: normal;
        font-display: swap; }

      @font-face {
        font-family: 'e-Ukraine';
        src: url("../assets/fonts/e-ukraine/e-Ukraine-Bold.woff") format("woff");
        font-weight: bold;
        font-style: normal;
        font-display: swap; }

      * {
        font-family: 'e-Ukraine';
      }
      .static {
        cursor: not-allowed;
      }
      .draggable, .draggable-group {
        cursor: move;
      }
      svg text {
        user-select: none;
      }
    </style>
    
    <script id="svgScript" type="text/javascript"><![CDATA[

      var topLeftLatLon = [52.64701, 20.01434]
      var bottomLeftLatLon = [43.91221, 20.01434]
      var topRightLatLon = [52.64701, 44.62032]
      var bottomRightLatLon = [43.91221, 44.62032]
      
      function makeDraggable(evt) {
        var svg = evt.target;
        var svgWidth = svg.scrollWidth;
        var svgHeight = svg.scrollHeight;
        var groul = evt.target.querySelector('.draggable');
        var selectedElement, offset, transform, bbox, confined, nMinX, nMaxX, nMinY, nMaxY;

        svg.setAttribute('viewBox', `0 0 ${svg.clientWidth} ${svg.clientHeight}`);
        svg.addEventListener('mousedown', startDrag, { passive: false });
        svg.addEventListener('mousemove', drag, { passive: false });
        svg.addEventListener('mouseup', endDrag, { passive: false });
        svg.addEventListener('mouseleave', endDrag, { passive: false });
        svg.addEventListener('touchstart', startDrag, { passive: false });
        svg.addEventListener('touchmove', drag, { passive: false });
        svg.addEventListener('touchend', endDrag, { passive: false });
        svg.addEventListener('touchleave', endDrag, { passive: false });
        svg.addEventListener('touchcancel', endDrag, { passive: false });

        function getMousePosition(evt) {
          var CTM = svg.getScreenCTM();
          if (evt.touches) { evt = evt.touches[0]; }
          return {
            x: (evt.clientX - CTM.e) / CTM.a,
            y: (evt.clientY - CTM.f) / CTM.d
          };
        }

        function startDrag(evt) {
          if (evt.target.parentElement.classList.contains('draggable')) {
            selectedElement = evt.target.parentElement;
            offset = getMousePosition(evt);

            // Make sure the first transform on the element is a translate transform
            var transforms = selectedElement.transform.baseVal;

            if (transforms.length === 0 || transforms.getItem(0).type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {
              // Create an transform that translates by (0, 0)
              var translate = svg.createSVGTransform();
              translate.setTranslate(0, 0);
              selectedElement.transform.baseVal.insertItemBefore(translate, 0);
            }

            // Get initial translation
            transform = transforms.getItem(0);
            offset.x -= transform.matrix.e;
            offset.y -= transform.matrix.f;

            confined = selectedElement.classList.contains('confine');
            if (confined) {
              bbox = selectedElement.getBBox();
              nMinX = bbox.x - ((bbox.x + bbox.width) - svgWidth + bbox.x);
              nMinY = bbox.y - ((bbox.y + bbox.height) - svgHeight + bbox.y);
              nMaxX = -bbox.x;
              nMaxY = -bbox.y;
            }
          }
        }

        function drag(evt) {
          if (selectedElement) {
            evt.preventDefault();

            var coord = getMousePosition(evt);
            var dx = coord.x - offset.x;
            var dy = coord.y - offset.y;

            if (confined) {
              if (dx < nMinX) { dx = nMinX; }
              else if (dx > nMaxX) { dx = nMaxX; }
              if (dy < nMinY) { dy = nMinY; }
              else if (dy > nMaxY) { dy = nMaxY; }
            }

            transform.setTranslate(dx, dy);
          }
        }

        function endDrag(evt) {
          selectedElement = false;
        }
      }
     
    ]]> </script>

    <g class="draggable confine">
      <!-- <image x="0" y="0" width="1656" height="900" href="map.png" /> -->
      <image x="-414" y="-225" width="2484" height="1350" href="map.png" />
      <!-- <image x="-828" y="-450" width="3312" height="1800" href="map.png" /> -->
    </g>
</svg>